# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\zqq\Desktop\pubg-bp\core\src\ui\window.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QWidget, QMessageBox
from PyQt5.QtCore import QUrl, QObject, pyqtSignal, QTimer
from src.model.gameClass import PUBGClass
import multiprocessing, json, random, requests, time, os
from src.tools.tools import (
    get_system_info,
    find_project_file,
    find_project_file,
    get_system_info,
)
from PyQt5.QtWebSockets import QWebSocket
from src.model.myredis import RedisWrapper
from src.API.base import QtRequest, base_url
from src.templates.reject import reject_From
import requests
from src.templates.login import Ui_Login


get_machine_code = get_system_info

base_ws_url = "127.0.0.1:18081"


# 创建一个工作线程 循环读取myredis中的值classState值
class WorkThread(QtCore.QThread):
    # 定义信号
    update = QtCore.pyqtSignal(str)

    def __init__(self, parent=None):
        super(WorkThread, self).__init__(parent)
        self.myredis = RedisWrapper()
        self.myredis.flushall()
        self.oldText = ""
        self.is_run = True

    def run(self):
        while self.is_run:
            val = self.myredis.get("classState")
            if val:
                if val.decode("utf-8") != self.oldText:
                    self.oldText = val.decode("utf-8")
                    self.update.emit(val.decode("utf-8"))
            time.sleep(2)

    def stop(self):
        self.is_run = False


class window_Form(QWidget):
    def __init__(self):
        self.version = "v2.8.1"
        multiprocessing.freeze_support()
        self.myredis = RedisWrapper()
        self.myredis1 = RedisWrapper(db=1)
        self.myredis.flushall()
        self.maps = {
            "alg": [],
            "mlm": [],
            "tg": [],
            "rd": [],
            "dst": [],
            "whd": [],
            "sn": [],
            "klj": [],
            "plm": [],
        }
        super(window_Form, self).__init__()
        self.setupUi(self)
        self.gameClass = None
        self.p1 = None
        self.p2 = None
        self.web_socket = None
        self.wsMax = 0
        self.userState = True  # 连接状态
        self.window_id = get_system_info()
        self.web_socket = QWebSocket()
        self.web_socket.open(
            QUrl(f"ws://{base_ws_url}/check_expiry_long/{self.window_id}")
        )
        self.start_ws()
        QTimer.singleShot(100, self.on_window_shown)

    def setupUi(self, Form):
        self._from = Form
        Form.setObjectName("Form")
        Form.resize(943, 489)
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(20, 10, 161, 71))
        self.pushButton.setObjectName("pushButton")
        # self.textBrowser = QtWidgets.QTextBrowser(Form)
        # self.textBrowser.setGeometry(QtCore.QRect(410, 10, 511, 201))
        # self.textBrowser.setObjectName("textBrowser")
        self.groupBox = QtWidgets.QGroupBox(Form)
        self.groupBox.setGeometry(QtCore.QRect(20, 240, 371, 221))
        self.groupBox.setObjectName("groupBox")
        self.tabWidget = QtWidgets.QTabWidget(self.groupBox)
        self.tabWidget.setGeometry(QtCore.QRect(10, 50, 351, 161))
        self.tabWidget.setObjectName("tabWidget")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.listWidget_2 = QtWidgets.QListWidget(self.tab_3)
        self.listWidget_2.setGeometry(QtCore.QRect(0, 0, 341, 136))
        self.listWidget_2.setObjectName("listWidget_2")
        self.tabWidget.addTab(self.tab_3, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.listWidget_3 = QtWidgets.QListWidget(self.tab_4)
        self.listWidget_3.setGeometry(QtCore.QRect(0, 0, 341, 136))
        self.listWidget_3.setObjectName("listWidget_3")
        self.tabWidget.addTab(self.tab_4, "")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.listWidget = QtWidgets.QListWidget(self.tab)
        self.listWidget.setGeometry(QtCore.QRect(0, 0, 341, 136))
        self.listWidget.setObjectName("listWidget")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.listWidget_4 = QtWidgets.QListWidget(self.tab_2)
        self.listWidget_4.setGeometry(QtCore.QRect(0, 0, 341, 136))
        self.listWidget_4.setObjectName("listWidget_4")
        self.tabWidget.addTab(self.tab_2, "")
        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")
        self.listWidget_5 = QtWidgets.QListWidget(self.tab_5)
        self.listWidget_5.setGeometry(QtCore.QRect(0, 0, 341, 136))
        self.listWidget_5.setObjectName("listWidget_5")
        self.tabWidget.addTab(self.tab_5, "")
        self.tab_6 = QtWidgets.QWidget()
        self.tab_6.setObjectName("tab_6")
        self.listWidget_6 = QtWidgets.QListWidget(self.tab_6)
        self.listWidget_6.setGeometry(QtCore.QRect(0, 0, 341, 136))
        self.listWidget_6.setObjectName("listWidget_6")
        self.tabWidget.addTab(self.tab_6, "")
        self.tab_9 = QtWidgets.QWidget()
        self.tab_9.setObjectName("tab_9")
        self.listWidget_8 = QtWidgets.QListWidget(self.tab_9)
        self.listWidget_8.setGeometry(QtCore.QRect(0, 0, 341, 136))
        self.listWidget_8.setObjectName("listWidget_8")
        self.tabWidget.addTab(self.tab_9, "")
        self.tab_7 = QtWidgets.QWidget()
        self.tab_7.setObjectName("tab_7")
        self.listWidget_9 = QtWidgets.QListWidget(self.tab_7)
        self.listWidget_9.setGeometry(QtCore.QRect(0, 0, 341, 136))
        self.listWidget_9.setObjectName("listWidget_9")
        self.tabWidget.addTab(self.tab_7, "")
        self.tab_8 = QtWidgets.QWidget()
        self.tab_8.setObjectName("tab_8")
        self.listWidget_7 = QtWidgets.QListWidget(self.tab_8)
        self.listWidget_7.setGeometry(QtCore.QRect(0, 0, 341, 136))
        self.listWidget_7.setObjectName("listWidget_7")
        self.tabWidget.addTab(self.tab_8, "")
        self.pushButton_2 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_2.setGeometry(QtCore.QRect(10, 20, 75, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_3.setGeometry(QtCore.QRect(90, 20, 75, 23))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_4.setGeometry(QtCore.QRect(170, 20, 75, 23))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_5.setGeometry(QtCore.QRect(250, 20, 75, 23))
        self.pushButton_5.setObjectName("pushButton_5")
        self.horizontalLayoutWidget = QtWidgets.QWidget(Form)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(190, 10, 201, 31))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.spinBox = QtWidgets.QSpinBox(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.spinBox.setFont(font)
        self.spinBox.setProperty("value", 30)
        self.spinBox.setObjectName("spinBox")
        self.horizontalLayout.addWidget(self.spinBox)
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(Form)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(190, 50, 201, 31))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        self.comboBox = QtWidgets.QComboBox(self.horizontalLayoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.comboBox.setFont(font)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.horizontalLayout_2.addWidget(self.comboBox)
        # self.textBrowser_2 = QtWidgets.QTextBrowser(Form)
        # self.textBrowser_2.setGeometry(QtCore.QRect(410, 260, 511, 211))
        # self.textBrowser_2.setObjectName("textBrowser_2")
        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(Form)
        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(20, 90, 371, 31))
        self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_3 = QtWidgets.QLabel(self.horizontalLayoutWidget_3)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_3.addWidget(self.label_3)
        self.lineEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget_3)
        # self.lineEdit.setEnabled(False)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout_3.addWidget(self.lineEdit)
        self.scrollArea = QtWidgets.QScrollArea(Form)
        self.scrollArea.setEnabled(True)
        self.scrollArea.setGeometry(QtCore.QRect(410, 220, 511, 241))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 509, 239))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.textEdit = QtWidgets.QTextEdit(self.scrollAreaWidgetContents)
        self.textEdit.setGeometry(QtCore.QRect(0, 0, 511, 241))
        self.textEdit.setObjectName("textEdit")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.horizontalLayoutWidget_4 = QtWidgets.QWidget(Form)
        self.horizontalLayoutWidget_4.setGeometry(QtCore.QRect(20, 130, 371, 31))
        self.horizontalLayoutWidget_4.setObjectName("horizontalLayoutWidget_4")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_4)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_4 = QtWidgets.QLabel(self.horizontalLayoutWidget_4)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Preferred
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_4.addWidget(self.label_4)
        self.dateTimeEdit = QtWidgets.QDateTimeEdit(self.horizontalLayoutWidget_4)
        self.dateTimeEdit.setEnabled(False)
        self.dateTimeEdit.setObjectName("dateTimeEdit")
        self.horizontalLayout_4.addWidget(self.dateTimeEdit)
        self.horizontalLayoutWidget_5 = QtWidgets.QWidget(Form)
        self.horizontalLayoutWidget_5.setGeometry(QtCore.QRect(400, 10, 371, 31))
        self.horizontalLayoutWidget_5.setObjectName("horizontalLayoutWidget_5")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_5)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.checkBox_2 = QtWidgets.QCheckBox(self.horizontalLayoutWidget_5)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBox_2.sizePolicy().hasHeightForWidth())
        self.checkBox_2.setSizePolicy(sizePolicy)
        self.checkBox_2.setObjectName("checkBox_2")
        self.horizontalLayout_5.addWidget(self.checkBox_2)
        self.pushButton_7 = QtWidgets.QPushButton(self.horizontalLayoutWidget_5)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_7.sizePolicy().hasHeightForWidth())
        self.pushButton_7.setSizePolicy(sizePolicy)
        self.pushButton_7.setObjectName("pushButton_7")
        self.horizontalLayout_5.addWidget(self.pushButton_7)
        self.label_5 = QtWidgets.QLabel(self.horizontalLayoutWidget_5)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_5.addWidget(self.label_5)
        self.pushButton_10 = QtWidgets.QPushButton(self.horizontalLayoutWidget_5)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.pushButton_10.sizePolicy().hasHeightForWidth()
        )
        self.pushButton_10.setSizePolicy(sizePolicy)
        self.pushButton_10.setObjectName("pushButton_10")
        self.horizontalLayout_5.addWidget(self.pushButton_10)
        self.horizontalLayoutWidget_6 = QtWidgets.QWidget(Form)
        self.horizontalLayoutWidget_6.setGeometry(QtCore.QRect(400, 40, 371, 31))
        self.horizontalLayoutWidget_6.setObjectName("horizontalLayoutWidget_6")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_6)
        self.horizontalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.checkBox = QtWidgets.QCheckBox(self.horizontalLayoutWidget_6)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBox.sizePolicy().hasHeightForWidth())
        self.checkBox.setSizePolicy(sizePolicy)
        self.checkBox.setObjectName("checkBox")
        self.horizontalLayout_6.addWidget(self.checkBox)
        self.pushButton_8 = QtWidgets.QPushButton(self.horizontalLayoutWidget_6)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_8.sizePolicy().hasHeightForWidth())
        self.pushButton_8.setSizePolicy(sizePolicy)
        self.pushButton_8.setObjectName("pushButton_8")
        self.horizontalLayout_6.addWidget(self.pushButton_8)
        self.label_6 = QtWidgets.QLabel(self.horizontalLayoutWidget_6)
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_6.addWidget(self.label_6)
        self.pushButton_9 = QtWidgets.QPushButton(self.horizontalLayoutWidget_6)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_9.sizePolicy().hasHeightForWidth())
        self.pushButton_9.setSizePolicy(sizePolicy)
        self.pushButton_9.setObjectName("pushButton_9")
        self.horizontalLayout_6.addWidget(self.pushButton_9)
        self.pushButton_6 = QtWidgets.QPushButton(Form)
        self.pushButton_6.setGeometry(QtCore.QRect(20, 170, 75, 23))
        self.pushButton_6.setObjectName("pushButton_6")
        # self.radioButton = QtWidgets.QRadioButton(Form)
        # self.radioButton.setGeometry(QtCore.QRect(100, 170, 91, 21))
        # self.radioButton.setObjectName("radioButton")
        self.horizontalLayoutWidget_7 = QtWidgets.QWidget(Form)
        self.horizontalLayoutWidget_7.setGeometry(QtCore.QRect(400, 70, 371, 31))
        self.horizontalLayoutWidget_7.setObjectName("horizontalLayoutWidget_7")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_7)
        self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.label_7 = QtWidgets.QLabel(self.horizontalLayoutWidget_7)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_7.addWidget(self.label_7)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.horizontalLayoutWidget_7)
        self.lineEdit_2.setEnabled(False)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.horizontalLayout_7.addWidget(self.lineEdit_2)
        self.pushButton_11 = QtWidgets.QPushButton(self.horizontalLayoutWidget_7)
        self.pushButton_11.setObjectName("pushButton_11")
        self.horizontalLayout_7.addWidget(self.pushButton_11)
        # 设置窗口 icon
        icon = QtGui.QIcon()
        icon_path = os.path.normpath(
            os.path.join(
                os.path.join(os.path.expanduser("~"), "ChickenBrothers"),
                "public/head.ico",
            )
        )
        print("图片", icon_path)
        icon.addPixmap(
            QtGui.QPixmap(find_project_file(icon_path)),
            QtGui.QIcon.Mode.Normal,
            QtGui.QIcon.State.Off,
        )
        Form.setWindowIcon(icon)
        self.retranslateUi(Form)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "吃鸡兄弟-V2.8.1"))
        self.pushButton.setText(_translate("Form", "开始挂机"))
        self.groupBox.setTitle(_translate("Form", "点位数据"))
        __sortingEnabled = self.listWidget_2.isSortingEnabled()
        self.listWidget_2.setSortingEnabled(False)
        self.listWidget_2.setSortingEnabled(__sortingEnabled)
        self.tabWidget.setTabText(
            self.tabWidget.indexOf(self.tab_3), _translate("Form", "艾伦格")
        )
        __sortingEnabled = self.listWidget_3.isSortingEnabled()
        self.listWidget_3.setSortingEnabled(False)
        self.listWidget_3.setSortingEnabled(__sortingEnabled)
        self.tabWidget.setTabText(
            self.tabWidget.indexOf(self.tab_4), _translate("Form", "米拉玛")
        )
        __sortingEnabled = self.listWidget.isSortingEnabled()
        self.listWidget.setSortingEnabled(False)
        self.listWidget.setSortingEnabled(__sortingEnabled)
        self.tabWidget.setTabText(
            self.tabWidget.indexOf(self.tab), _translate("Form", "泰戈")
        )
        __sortingEnabled = self.listWidget_4.isSortingEnabled()
        self.listWidget_4.setSortingEnabled(False)
        self.listWidget_4.setSortingEnabled(__sortingEnabled)
        self.tabWidget.setTabText(
            self.tabWidget.indexOf(self.tab_2), _translate("Form", "容都")
        )
        __sortingEnabled = self.listWidget_5.isSortingEnabled()
        self.listWidget_5.setSortingEnabled(False)
        self.listWidget_5.setSortingEnabled(__sortingEnabled)
        self.tabWidget.setTabText(
            self.tabWidget.indexOf(self.tab_5), _translate("Form", "帝斯顿")
        )
        __sortingEnabled = self.listWidget_6.isSortingEnabled()
        self.listWidget_6.setSortingEnabled(False)
        self.listWidget_6.setSortingEnabled(__sortingEnabled)
        self.tabWidget.setTabText(
            self.tabWidget.indexOf(self.tab_6), _translate("Form", "维寒迪")
        )
        self.tabWidget.setTabText(
            self.tabWidget.indexOf(self.tab_9), _translate("Form", "萨诺")
        )
        self.tabWidget.setTabText(
            self.tabWidget.indexOf(self.tab_7), _translate("Form", "卡拉金")
        )
        self.tabWidget.setTabText(
            self.tabWidget.indexOf(self.tab_8), _translate("Form", "帕拉莫")
        )
        # 禁用放大窗口 和 缩小到任务栏
        # 禁用窗体最大化
        Form.setWindowFlag(QtCore.Qt.WindowType.WindowMaximizeButtonHint, False)
        # 禁用窗体最小化
        Form.setWindowFlag(QtCore.Qt.WindowType.WindowMinimizeButtonHint, False)
        self.pushButton_2.setText(_translate("Form", "导入点位"))
        self.pushButton_3.setText(_translate("Form", "删除点位"))
        self.pushButton_4.setText(_translate("Form", "缓存点位"))
        self.pushButton_5.setText(_translate("Form", "清除缓存"))
        self.label.setText(_translate("Form", "跳伞延迟时间(秒)"))
        self.label_2.setText(_translate("Form", "选点方式"))
        self.comboBox.setItemText(0, _translate("Form", "随机"))
        self.comboBox.setItemText(1, _translate("Form", "第一个点"))
        self.label_3.setText(_translate("Form", "机器码:"))
        self.label_4.setText(_translate("Form", "到期时间："))
        # self.pushButton_6.setText(_translate("Form", "增加时间"))
        # self.radioButton.setText(_translate("Form", "F12自动截图"))
        self.checkBox_2.setText(_translate("Form", "开启"))
        self.pushButton_7.setText(_translate("Form", "设置截屏保存文件夹"))
        self.label_5.setText(_translate("Form", ""))
        self.pushButton_10.setText(_translate("Form", "打开"))
        self.checkBox.setText(_translate("Form", "开启"))
        self.pushButton_8.setText(_translate("Form", "设置截图保存文件夹"))
        self.label_6.setText(_translate("Form", ""))
        self.pushButton_9.setText(_translate("Form", "打开"))
        self.pushButton_6.setText(_translate("Form", "续期"))
        self.label_7.setText(_translate("Form", "云账号  "))
        self.pushButton_11.setText(_translate("Form", "登录"))
        self.bind_events()

    def on_window_shown(self):
        # 设置 机器码 input 为只读
        self.lineEdit.setReadOnly(True)
        # _code = get_machine_code()
        _code = self.window_id
        print(_code)
        if _code:
            self.lineEdit.setText(_code)
        self.loadingMaps()
        # 调用 WorkThread 修改 label 的值
        self.workThread = WorkThread()
        self.workThread.update.connect(self.add_log_message)
        self.workThread.start()
        self.check_connectivity()
        # 判断 是否开启 截屏保存 和 截图保存
        self.initImage()

    def bind_events(self):
        self.listWiget = [
            self.listWidget_2,
            self.listWidget_3,
            self.listWidget,
            self.listWidget_4,
            self.listWidget_5,
            self.listWidget_6,
            self.listWidget_8,
            self.listWidget_9,
            self.listWidget_7,
        ]
        # 设置 最新公告
        # 给 textEdit 设置只读
        self.textEdit.setReadOnly(True)
        self.add_log_message("欢迎使用吃鸡兄弟")
        # 给开始挂机按钮绑定事件
        self.pushButton.clicked.connect(self.startMainGame)
        # 给 导入点位 和 删除点位 绑定事件
        self.pushButton_2.clicked.connect(self.importPoint)
        self.pushButton_3.clicked.connect(self.deletePoint)
        # 给 缓存点位 和 清除缓存 绑定事件
        self.pushButton_4.clicked.connect(self.cachePoint)
        self.pushButton_5.clicked.connect(self.clearCache)
        # 给 续期按钮绑定事件
        self.pushButton_6.clicked.connect(self.renewal)
        # 给 设置截屏保存位置 和 设置截图保存位置 绑定事件
        self.pushButton_7.clicked.connect(self.saveWindowImage)
        self.pushButton_8.clicked.connect(self.saveBPImage)
        # 给 设置截屏保存位置 和 设置截图保存位置的开启按钮绑定事件
        self.checkBox_2.stateChanged.connect(self.openWindowImage)
        self.checkBox.stateChanged.connect(self.openBPImage)
        # 给 设置截屏保存位置 和 设置截图保存位置的打开按钮绑定事件
        self.pushButton_10.clicked.connect(self.openWindowImageBtn)
        self.pushButton_9.clicked.connect(self.openBPImageBtn)
        # 给登录按钮绑定事件
        self.pushButton_11.clicked.connect(self.login)

    # 初始化截图相关功能
    def initImage(self):
        try:
            # 从缓存中获取 截屏保存位置 开启状态
            ImageSavaState = self.myredis1.get("ImageSavaState")
            if ImageSavaState:
                ImageSavaState = ImageSavaState.decode("utf-8")
            ImageSavaPath = self.myredis1.get("ImageSavaPath")
            if ImageSavaPath:
                ImageSavaPath = ImageSavaPath.decode("utf-8")
            bpImageSaveState = self.myredis1.get("bpImageSaveState")
            if bpImageSaveState:
                bpImageSaveState = bpImageSaveState.decode("utf-8")
            bpImageSavePath = self.myredis1.get("bpImageSavePath")
            # 从缓存中读取 云账号id
            cloud_id = self.myredis1.get("cloud_id")
            if cloud_id:
                self.lineEdit_2.setText(cloud_id.decode("utf-8"))
                self.pushButton_11.setText("退出登录")
            if bpImageSavePath:
                bpImageSavePath = bpImageSavePath.decode("utf-8")
            if ImageSavaState:
                self.checkBox_2.setChecked(bool(ImageSavaState))
                self.pushButton_7.setEnabled(bool(ImageSavaState))
            else:
                self.checkBox_2.setChecked(False)
                self.pushButton_7.setEnabled(False)
            # 从缓存中获取 截屏保存位置 路径
            if ImageSavaPath:
                self.label_5.setText(ImageSavaPath)
            else:
                self.label_5.setText("")
            # 从缓存中获取 截图保存位置 开启状态
            if bpImageSaveState and bpImageSavePath:
                self.checkBox.setChecked(bool(bpImageSaveState))
                self.pushButton_8.setEnabled(bool(bpImageSaveState))
            else:
                self.pushButton_8.setEnabled(False)
                self.checkBox.setChecked(False)
            if ImageSavaState and ImageSavaPath:
                self.checkBox_2.setChecked(True)
                self.pushButton_7.setEnabled(True)
            else:
                self.pushButton_7.setEnabled(False)
                self.checkBox_2.setChecked(False)
            # 从缓存中获取 截图保存位置 路径
            if bpImageSavePath:
                self.label_6.setText(bpImageSavePath)
            else:
                self.label_6.setText("")
        except Exception as e:
            self.add_log_message(f"初始化截图功能失败:{e}")

    # 开关截图保存位置
    def openWindowImage(self):
        if self.checkBox_2.isChecked():
            self.pushButton_7.setEnabled(True)
        else:
            self.pushButton_7.setEnabled(False)
        # 缓存 截屏保存位置 开启状态 到 redis
        self.myredis1.set("ImageSavaState", str(self.checkBox_2.isChecked()))

    # 开关截图保存位置
    def openBPImage(self):
        if self.checkBox.isChecked():
            self.pushButton_8.setEnabled(True)
        else:
            self.pushButton_8.setEnabled(False)
        # 缓存 截图保存位置 开启状态 到 redis
        self.myredis1.set("bpImageSaveState", str(self.checkBox.isChecked()))

    # 设置截屏保存位置
    def saveWindowImage(self):
        # 选择文件夹
        file_dialog = QtWidgets.QFileDialog()
        file_path = file_dialog.getExistingDirectory()
        if file_path:
            self.label_5.setText(file_path)
            # 设置缓存 截屏保存位置路径 到 redis
            self.myredis1.set("ImageSavaPath", file_path)

    # 设置截图保存位置
    def saveBPImage(self):
        # 选择文件夹
        file_dialog = QtWidgets.QFileDialog()
        file_path = file_dialog.getExistingDirectory()
        if file_path:
            self.label_6.setText(file_path)
            # 设置缓存 截图保存位置路径 到 redis
            self.myredis1.set("bpImageSavePath", file_path)

    # 打开截屏保存位置
    def openWindowImageBtn(self):
        os.startfile(self.label_5.text())

    # 打开截图保存位置
    def openBPImageBtn(self):
        os.startfile(self.label_6.text())

    # 开始挂机
    def startMainGame(self):
        _maps = self.maps
        # 获取跳伞时间
        jump_time = self.spinBox.value()
        # 获取 标点方式
        select_way = self.comboBox.currentText()
        if select_way == "随机":
            select_way = True
        else:
            select_way = False
        # 判断 是否开启 截屏保存 和 截图保存
        if self.checkBox_2.isChecked():
            window_image = self.label_5.text()
        else:
            window_image = None
        if self.checkBox.isChecked():
            bp_image = self.label_6.text()
        else:
            bp_image = None
        # 启动主进程
        if self.gameClass is None:
            self.gameClass = PUBGClass(
                maps=_maps,
                windows_id=self.window_id,
                pip_user_id=self.lineEdit_2.text(),
                planeTime=jump_time,
                randomMap=select_way,
                bpImageSavePath=bp_image,
                ImageSavaPath=window_image,
            )
            self.p1 = multiprocessing.Process(target=self.gameClass.playHomeLoop)
            self.p2 = multiprocessing.Process(target=self.gameClass.gameMainLoop)
            self.p1.start()
            self.p2.start()
            # 修改按钮文字
            self.pushButton.setText("停止挂机")
        else:
            self.gameClass.stop()
            if self.p1:
                self.p1.join()
            if self.p2:
                self.p2.join()
            self.p1 = None
            self.p2 = None
            self.gameClass = None
            # 修改按钮文字
            self.pushButton.setText("开始挂机")

    # 导入点位
    def importPoint(self):
        # 判断当前选中的是哪个tab
        # 找到这个 tab 下的 listWidget
        print("导入点位")
        try:
            file_name, data = self.readPointFile()
            if file_name and data:
                self.update_list(file_name, data)
            else:
                QMessageBox.warning(self, "错误", "导入失败")
        except Exception as e:
            self.add_log_message(f"导入失败:{e}")

    # 删除点位
    def deletePoint(self):
        try:
            listWiget = [
                self.listWidget_2,
                self.listWidget_3,
                self.listWidget,
                self.listWidget_4,
                self.listWidget_5,
                self.listWidget_6,
            ]
            mapKeys = ["alg", "mlm", "tg", "rd", "dst", "whd", "sn", "klj", "plm"]
            target_list = listWiget[self.tabWidget.currentIndex()]
            if target_list.count() > 0:
                target_list.takeItem(target_list.currentRow())
                if len(self.maps[mapKeys[self.tabWidget.currentIndex()]]) > 0:
                    self.maps[mapKeys[self.tabWidget.currentIndex()]].pop(
                        target_list.currentRow()
                    )
        except Exception as e:
            self.add_log_message(f"删除失败")

    # 更新点位列表
    def update_list(self, map_name, map_data):
        try:
            mapKeys = ["alg", "mlm", "tg", "rd", "dst", "whd", "sn", "klj", "plm"]
            target_list = self.listWiget[self.tabWidget.currentIndex()]
            item = QtWidgets.QListWidgetItem()
            target_list.addItem(item)
            target_list.item(target_list.count() - 1).setText(map_name)
            map_data["name"] = map_name
            self.maps[mapKeys[self.tabWidget.currentIndex()]].append(map_data)
        except Exception as e:
            self.add_log_message("更新失败")

    # 读取文件
    def readPointFile(self):
        file_dialog = QtWidgets.QFileDialog()
        file_path, _ = file_dialog.getOpenFileName(
            None, "Select JSON File", "", "JSON Files (*.json)"
        )
        try:
            if file_path:
                with open(file_path, "r", encoding="utf-8") as f:
                    data = json.loads(f.read())
                    # 读取文件名
                    file_name = file_path.split("/")[-1].split(".")[0]
                    return file_name, data
        except Exception as e:
            if file_path:
                QMessageBox.warning(self, "错误", "导入失败")
                return None, None
            else:
                self.add_log_message("未选择文件")
                return None, None

    # 更新日志
    def add_log_message(self, text):
        # 添加一些日志消息
        self.textEdit.append(self.setTextType(text))
        # 自动滚动到底部
        self.textEdit.verticalScrollBar().setValue(
            self.textEdit.verticalScrollBar().maximum()
        )

    def setTextType(self, text):
        # 获取当前 年 月 日 时 分 秒  给变量 myTime
        myTime = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(time.time()))
        # 返回格式化后的字符串
        return f"[{myTime}]-----{text}"

        # 长连接的返回值

    # 缓存点位
    def cachePoint(self):
        self.myredis1.set("maps", json.dumps(self.maps))
        self.add_log_message("点位缓存成功")

    def loadingMaps(self):
        mapKeys = ["alg", "mlm", "tg", "rd", "dst", "whd", "sn", "klj", "plm"]
        _maps = self.myredis1.get("maps")
        if _maps:
            self.maps = json.loads(_maps)
            for i, map_key in enumerate(mapKeys):
                if len(self.maps[map_key]) > 0:
                    for j, map_data in enumerate(self.maps[map_key]):
                        target_list = self.listWiget[i]
                        item = QtWidgets.QListWidgetItem()
                        target_list.addItem(item)
                        target_list.item(j).setText(map_data["name"])

    # 清除缓存
    def clearCache(self):
        reply = QtWidgets.QMessageBox.question(
            self,
            "确认清空",
            "清空会清除所有现有点位(不会删除文件)你确定要清空吗?",
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
        )
        if reply == QtWidgets.QMessageBox.Yes:
            print("确认清空")
            self.maps = {
                "alg": [],
                "mlm": [],
                "tg": [],
                "rd": [],
                "dst": [],
                "whd": [],
                "sn": [],
                "klj": [],
                "plm": [],
            }
            self.listWiget[self.tabWidget.currentIndex()].clear()
            self.myredis1.flushall()
            self.add_log_message("点位缓存清除成功")

    # 连通性检测
    def check_connectivity(self):
        match_code = self.window_id
        if match_code:
            try:
                code, res = QtRequest(f"/check_expiry/{match_code}", "GET")
                if res.get("code") >= 0:
                    if res.get("message") == "用户已到期":
                        self._from.close()
                    else:
                        print(res.get("endTime"))
                        end_time = res.get("endTime")
                        # 将 2024-07-02 15:13 格式的日期写入到界面
                        self.dateTimeEdit.setDateTime(
                            QtCore.QDateTime.fromString(end_time, "yyyy-MM-dd hh:mm")
                        )
                        return True
                else:
                    self._from.close()
            except Exception as e:
                print("错误", e)
                QMessageBox.warning(self, "错误", "网络连接失败,请检查你的DNS")
                self._from.close()
                return False
        else:
            QMessageBox.warning(self, "错误", "无法获取机器码")
            self._from.close()
            return False
        pass

    # 续期
    def renewal(self):
        self.reject_From = reject_From()
        self.reject_From.closed.connect(self.renewal_finished)  # 连接信号到槽
        self.reject_From.show()
        pass

    def renewal_finished(self):
        self.check_connectivity()
        print("续期窗口关闭")

    # 登录
    def login(self):
        # 判断按钮是登录 还是退出登录
        if self.pushButton_11.text() == "退出登录":
            self.myredis1.delete("cloud_id")
            self.lineEdit_2.setText("")
            self.pushButton_11.setText("登录")
            return
        self.login_From = Ui_Login()
        self.login_From.pip_user_id.connect(self.webLogin)  # 连接信号到槽
        self.login_From.show()
        pass

    def webLogin(self, user_id):
        print("登录成功", user_id)
        if user_id:
            # 修改云账号id
            self.lineEdit_2.setText(user_id)
            # 将登录改为退出登录
            self.pushButton_11.setText("退出登录")
            # 缓存用户id
            self.myredis1.set("cloud_id", user_id)

    # 长连接相关
    def sendMessage(self):
        print("发送消息")
        text = json.dumps({"window_id": self.window_id, "version": self.version})
        self.web_socket.sendTextMessage(str(text))

    def handleMessage(self, message):
        print("接受消息:", message)
        if (
            "无效的机器码/该机器已过期" in message
            or "已到期" in message
            or "版本不一致" in message
        ):
            # 主动断开 socket连接
            self.web_socket.close()
            QMessageBox.warning(self, "错误", str(message))
            # 主动停止挂机
            if self.gameClass:
                self.gameClass.stop()
            self.p1 = None
            self.p2 = None
            self.gameClass = None

            self._from.close()
        if "未到期" in message:
            self.userState = True
            # 检查是进程们是否正常启动
            if self.gameClass:
                print(self.p1.is_alive())
                # print(self.p2.is_alive())
                if self.p1.is_alive() is False:
                    self.p1 = multiprocessing.Process(
                        target=self.gameClass.playHomeLoop
                    )
                    self.p1.start()
                    pass
                if self.p2.is_alive() is False:
                    self.p2 = multiprocessing.Process(
                        target=self.gameClass.gameMainLoop
                    )
                    self.p2.start()
                    pass

    def handleBinaryMessage(self, message):
        print("Received binary message:", message)

    def onOpen(self):
        self.sendMessage()
        self.userState = True
        self.add_log_message("连接成功")

    def onClose(self):
        try:
            print("关闭连接", self.wsMax)
            if self.wsMax < 3:
                self.add_log_message("重连中...")
                self.wsMax += 1
                # self.web_socket = None
                self.web_socket.open(
                    QUrl(f"ws://{base_ws_url}/check_expiry_long/{self.window_id}")
                )
                time.sleep(2)
            else:
                self.add_log_message("网络连接失败！")
                QMessageBox.warning(self, "错误", "网络连接失败！")
                self._from.close()
        except Exception as e:
            self._from.close()

    def onError(self):
        print("Error:", self.web_socket.error())

    def start_ws(self):
        try:
            self.wsMax = 0
            self.web_socket.open(
                QUrl(f"ws://{base_ws_url}/check_expiry_long/{self.window_id}")
            )
            # 连接信号和槽
            self.web_socket.textMessageReceived.connect(self.handleMessage)
            self.web_socket.binaryMessageReceived.connect(self.handleBinaryMessage)
            self.web_socket.connected.connect(self.onOpen)
            self.web_socket.disconnected.connect(self.onClose)
            # 错误处理
            self.web_socket.error.connect(self.onError)
        except Exception as e:
            print("出现错误", e)

    def update_web_socket(self, state):
        if state == False:
            QMessageBox.warning(self, "错误", "连接已断开")
        else:
            print("已连接", state)

    def closeEvent(self, event):
        # 这里可以添加自定义的关闭逻辑
        if self.p1:
            self.p1.terminate()
        if self.p2:
            self.p2.terminate()
